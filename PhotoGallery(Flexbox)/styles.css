* { /* asterisk means global selector */
    /* box-sizing can alter the way browsers calculate the size of container elements; content-box is default*/
    /* content-box computes the width without regard to padding and border size which can result in spillover */
    /* border-box includes padding and border in the width calculation, resizing the image to fit within the container*/
    box-sizing: border-box; 
  }

  /* this .gallery and img section was explicitly to see the results of box-sizing above and is no longer needed */
  /*
  .gallery {
    border: 5px solid red;
    width: 50%;
  }
  img {
    width: 100%;
    border: 5px solid blue;
    padding: 5px;
  } */
  
  body {
    margin: 0;
    font-family: sans-serif;
    background: #f5f6f7;
  }
  
  .header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
  }
  

  /* we made this a flex container
  Flexbox is a one-dimeensional CSS layout that can control the way items are spaced out and 
  aligned in a container. It can be used to create complex layouts. */
  /* Flexbox has a main and cross axis. The main axis is defined by the flex-direction property,
  which has 4 possible values:
    row: items are placed along the horizontal axis
    row-reverse: items are placed along the horizontal axis from right to left
    column: items are placed along the vertical axis
    column-reverse: items are placed along the vertical axis from bottom to top
  Note: The axes and directions will be different depending on the text direction. */
  .gallery {
    display: flex;
    flex-direction: row;
    /* flex-wrap determines how flex items behave when the flex container is too small.
    setting it to wrap will allow the items to wrap to the next row or column
    nowrap (default) will prevent items from wrapping and shrink them if needed */
    flex-wrap: wrap;
    /* justify-content determines how the items inside a flex container are positioned along
    the main axis, affecting their position and the space around them*/
    justify-content: center;
    /* align-items defines how flex content will behave along the cross axis */
    align-items: center;
    /* the gap property sets gaps (or gutters) between rows and columns
    has sub-properties row-gap and column-gap
    is applied to the container element */
    gap: 16px;
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px 10px;
  }
  
  .gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /* some images may become distorted as their aspect ratios are altered to fit the available space
    the object-fit property will define how images should behave
    cover will fill the container while maintaining aspect ratio and cropping excess */
    object-fit: cover;
    border-radius: 10px;
  }
  

  /* the ::after pseudo-element creates an element that is the last child of the selected element
  you can use it to add an empty element after the last image
  if you give it the same width as the other children, it will push the last child to the left
  when the children are arranged in a two-column pattern, preventing the last image from being centered */
  .gallery::after {
    content: "";
    width: 350px;
  }